//// [tests/cases/compiler/jsxGenericComponentWithSpreadingResultOfGenericFunction.tsx] ////

=== Performance Stats ===
Assignability cache: 2,100 / 2,100 (nearest 100)
Type Count: 7,600 / 7,600 (nearest 100)
Instantiation count: 89,500 / 89,500 (nearest 500)
Symbol count: 66,000 / 66,000 (nearest 500)

=== jsxGenericComponentWithSpreadingResultOfGenericFunction.tsx ===
/// <reference path="react16.d.ts" />

// repro #51577

declare function omit<T, K extends string>(names: readonly K[], obj: T): Omit<T, K>;
>omit : { <T, K extends string>(names: readonly K[], obj: T): Omit<T, K>; <K_1 extends string>(names: readonly K_1[]): <T_1>(obj: T_1) => Omit<T_1, K_1>; }
>     : ^^^ ^^ ^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^ ^^^          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>names : readonly K[]
>      : ^^^^^^^^^^^^
>obj : T
>    : ^

declare function omit<K extends string>(names: readonly K[]): <T>(obj: T) => Omit<T, K>;
>omit : { <T, K_1 extends string>(names: readonly K_1[], obj: T): Omit<T, K_1>; <K extends string>(names: readonly K[]): <T>(obj: T_1) => Omit<T_1, K>; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^            ^^^                             ^^^
>names : readonly K[]
>      : ^^^^^^^^^^^^
>obj : T
>    : ^

declare const otherProps: { bar: string, qwe: boolean }
>otherProps : { bar: string; qwe: boolean; }
>           : ^^^^^^^      ^^^^^^^       ^^^
>bar : string
>    : ^^^^^^
>qwe : boolean
>    : ^^^^^^^

declare function GenericComponent<T>(props: T): null
>GenericComponent : <T>(props: T) => null
>                 : ^ ^^^^^^^^^ ^^^^^    
>props : T
>      : ^

<GenericComponent {...omit(['bar'], otherProps)} />; // no error
><GenericComponent {...omit(['bar'], otherProps)} /> : JSX.Element
>                                                    : ^^^^^^^^^^^
>GenericComponent : <T>(props: T) => null
>                 : ^^^^^^^^^^^^^^^^^^^^^
>omit(['bar'], otherProps) : Omit<{ bar: string; qwe: boolean; }, "bar">
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>omit : { <T, K extends string>(names: readonly K[], obj: T): Omit<T, K>; <K_1 extends string>(names: readonly K_1[]): <T_1>(obj: T_1) => Omit<T_1, K_1>; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>['bar'] : "bar"[]
>        : ^^^^^^^
>'bar' : "bar"
>      : ^^^^^
>otherProps : { bar: string; qwe: boolean; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



