//// [tests/cases/compiler/jsxIntrinsicElementsCompatability.tsx] ////

=== Performance Stats ===
Assignability cache: 2,300 / 2,300 (nearest 100)
Type Count: 7,700 / 7,700 (nearest 100)
Instantiation count: 94,000 / 94,000 (nearest 500)
Symbol count: 68,000 / 68,000 (nearest 500)

=== jsxIntrinsicElementsCompatability.tsx ===
/// <reference path="react16.d.ts" />
import * as React from "react";
>React : typeof React
>      : ^^^^^^^^^^^^

function SomeComponent<T extends 'button' | 'a'>(props: { element?: T } & JSX.IntrinsicElements[T]): JSX.Element {
>SomeComponent : <T extends "a" | "button">(props: { element?: T; } & JSX.IntrinsicElements[T]) => JSX.Element
>              : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                           ^^^^^           
>props : { element?: T; } & JSX.IntrinsicElements[T]
>      : ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>element : T | undefined
>        : ^^^^^^^^^^^^^
>JSX : any
>    : ^^^
>JSX : any
>    : ^^^

    // Just so the return value is RectElement, the rendered element doesnt matter
    return <div />
><div /> : JSX.Element
>        : ^^^^^^^^^^^
>div : any
>    : ^^^
}

function Test<T extends 'button' | 'a'>(el: T) {
>Test : <T extends "a" | "button">(el: T) => JSX.Element
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>el : T
>   : ^

    return <SomeComponent element={el} />
><SomeComponent element={el} /> : JSX.Element
>                               : ^^^^^^^^^^^
>SomeComponent : <T_1 extends "a" | "button">(props: { element?: T_1 | undefined; } & JSX.IntrinsicElements[T_1]) => JSX.Element
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>element : T
>        : ^
>el : T
>   : ^
}
